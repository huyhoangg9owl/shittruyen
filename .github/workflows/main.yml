name: 'Build Desktop App (Window, Linux, MacOS)'

on:
    workflow_dispatch:
concurrency:
    group: ${{ github.ref }}
    cancel-in-progress: false
env:
    ARCH: x86_64
    DEPENDENCIES_ARCH: "'cmake' 'libappindicator-gtk3' 'webkit2gtk' 'gtk3' 'xdotool'"
    DEPENDENCIES_RPM: 'cmake, javascriptcoregtk-4.1, libsoup-3.0, webkit2gtk-4.1, libxdo, libappindicator-gtk3, xdotool'

jobs:
    SETUP:
        runs-on: ubuntu-latest
        outputs:
            name: ${{ steps.get-package.outputs.displayName }}
            name_bin: ${{ steps.get-package.outputs.name }}
            version: ${{ steps.get-package.outputs.version }}
            description: ${{ steps.get-package.outputs.description }}
            license: ${{ steps.get-package.outputs.license }}
            deb_pkg_name: ${{ steps.get-package.outputs.name }}_${{ steps.get-package.outputs.version }}_amd64.deb
            deb_pkg_path: ./tauri/target/release/bundle/deb/
            deb_pkg_renamed: ${{ steps.get-package.outputs.name }}-${{ steps.get-package.outputs.version }}-${{ env.ARCH }}.deb
            arch_pkg_name: ${{ steps.get-package.outputs.name }}-${{ steps.get-package.outputs.version }}-1-${{ env.ARCH }}.pkg.tar.zst
            rpm_pkg_name: RPMS/${{ steps.get-package.outputs.name }}-${{ steps.get-package.outputs.version }}-1.${{ env.ARCH }}.rpm
            tag_name: v${{ steps.get-package.outputs.version }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup node.js (v20)
              uses: actions/setup-node@v4
              with:
                  node-version: 20
            - name: Get package info
              id: get-package
              run: |
                  echo "name=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT
                  echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
                  echo "description=$(node -p "require('./package.json').description")" >> $GITHUB_OUTPUT
                  echo "license=$(node -p "require('./package.json').license")" >> $GITHUB_OUTPUT
                  echo "displayName=$(node -p "require('./package.json').displayName")" >> $GITHUB_OUTPUT

    BUILD:
        needs: [SETUP]
        permissions:
            contents: write
        strategy:
            fail-fast: false
            matrix:
                # platform: [windows-latest, ubuntu-latest, macos-latest]
                platform: [ubuntu-latest]
        runs-on: ${{ matrix.platform }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup node.js (v20)
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Install Rust (stable)
              uses: dtolnay/rust-toolchain@stable

            - name: Install dependencies (Linux only)
              if: matrix.platform == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y cmake libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev libxcb-shape0-dev libxcb-xfixes0-dev libxdo-dev libssl1.1

            - name: Install frontend dependencies
              run: yarn install

            - name: Set NO_STRIP environment variable
              if: matrix.platform == 'ubuntu-latest' || matrix.platform == 'macos-latest'
              run: echo "NO_STRIP=true" >> $GITHUB_ENV

            - name: Run Tauri Action
              uses: tauri-apps/tauri-action@v0
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NO_STRIP: true
              with:
                  tagName: ${{ needs.setup.outputs.tag_name }}
                  releaseName: ${{ needs.setup.outputs.tag_name  }}
                  releaseDraft: false
                  prerelease: false

            - name: Copy deb package && Create PKGBUILD file (Linux only)
              if: matrix.platform == 'ubuntu-latest'
              run: |
                  mkdir -p ${{ needs.setup.outputs.name_bin }}
                  cp -fr ${{ needs.setup.outputs.deb_pkg_path }}${{ needs.setup.outputs.deb_pkg_name }} ${{ needs.setup.outputs.name_bin }}/${{ needs.setup.outputs.deb_pkg_renamed }}
                  cat <<EOF > ./${{ needs.setup.outputs.name_bin }}/PKGBUILD
                    pkgname=${{ needs.setup.outputs.name }}
                    pkgver=${{ needs.setup.outputs.version }}
                    md5sums=('$(md5sum ${{ needs.setup.outputs.name_bin }}/${{ needs.setup.outputs.deb_pkg_renamed }}  | awk '{print $1}')')
                    pkgrel=1
                    depends=(${{ env.DEPENDENCIES_ARCH }})
                    pkgdesc='${{ needs.setup.outputs.description }}'
                    arch=('${{ env.ARCH }}')
                    url="https://github.com/${{ github.repository }}"
                    license=('${{ needs.setup.outputs.license }}')
                    source=("\$url/releases/download/${{ needs.setup.outputs.tag_name }}/${{ needs.setup.outputs.deb_pkg_renamed }}")

                    build() {
                        rm control.tar.gz
                        tar xvf data.tar.gz
                    }

                    package() {
                        cp -fr usr/ \${pkgdir}
                    }
                  EOF
                  cat ${{ needs.setup.outputs.name_bin }}/PKGBUILD

            - name: Create arch package (Linux only)
              if: matrix.platform == 'ubuntu-latest'
              uses: 2m/arch-pkgbuild-builder@v1.17
              with:
                  debug: true
                  target: pkgbuild
                  pkgname: ${{ needs.setup.outputs.name_bin }}/

            - name: Upload Arch && RPM Release (Linux only)
              if: matrix.platform == 'ubuntu-latest'
              uses: softprops/action-gh-release@v1
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  tag_name: ${{ needs.setup.outputs.tag_name  }}
                  files: |
                      ${{ needs.setup.outputs.name_bin }}/${{ needs.setup.outputs.arch_pkg_name }}
